import pandas as pd

# 示例RFQ数据
rfq_df = pd.DataFrame({
    'rfqId': [1, 2, 3, 4, 5, 6],
    'timestamp': [1.0, 1.2, 2.5, 1.8, 2.1, 2.6],
    'ticker': ['30yOTR', '30y30y', '30yO', '10yOTR', '10y10y', '2yOTR'],
    'size': [100, 100, 200, 300, 200, 150],
    'quotePrice': [99.5, 100.5, 101.0, 102.0, 101.5, 103.0],
    'side': ['Buy', 'Sell', 'Buy', 'Sell', 'Buy', 'Sell']
})

# 提取ticker的前缀
def extract_prefix(ticker):
    if ticker.startswith(('10y', '20y', '30y')):
        return ticker[:3]
    elif ticker.startswith(('2y', '3y', '5y', '7y')):
        return ticker[:2]
    return None

rfq_df['ticker_prefix'] = rfq_df['ticker'].apply(extract_prefix)

# 按ticker_prefix分组
buy_df = rfq_df[rfq_df['side'] == 'Buy']
sell_df = rfq_df[rfq_df['side'] == 'Sell']

# 初始化结果
switch_trade_id = 1
rfq_df['switchTradeId'] = None

# 按prefix处理每组
for prefix in rfq_df['ticker_prefix'].unique():
    buy_group = buy_df[buy_df['ticker_prefix'] == prefix]
    sell_group = sell_df[sell_df['ticker_prefix'] == prefix]
    
    # 笛卡尔积生成所有可能的组合
    potential_pairs = pd.merge(
        buy_group, sell_group, on='ticker_prefix', suffixes=('_buy', '_sell')
    )
    potential_pairs['time_diff'] = abs(potential_pairs['timestamp_buy'] - potential_pairs['timestamp_sell'])
    
    # 按时间差排序
    potential_pairs = potential_pairs.sort_values('time_diff')
    
    # 匹配最接近的组合
    matched_buy = set()
    matched_sell = set()
    
    for _, row in potential_pairs.iterrows():
        buy_id = row['rfqId_buy']
        sell_id = row['rfqId_sell']
        
        if buy_id not in matched_buy and sell_id not in matched_sell:
            # 分配SwitchTradeId
            rfq_df.loc[rfq_df['rfqId'] == buy_id, 'switchTradeId'] = switch_trade_id
            rfq_df.loc[rfq_df['rfqId'] == sell_id, 'switchTradeId'] = switch_trade_id
            
            # 标记为已匹配
            matched_buy.add(buy_id)
            matched_sell.add(sell_id)
            
            switch_trade_id += 1

# 输出结果
print(rfq_df)
