import numpy as np
from scipy.optimize import minimize_scalar
import matplotlib.pyplot as plt

# 1. 预设：Pi(Q, m), Fill(Q, m), Gamma(Q) 都基于给定的 fM 函数（通过闭包注入）
def get_fast_gamma_function(fM_callable, Q_obs, S_i, lam, m_max=500, n_points=300):
    """
    构造快速求解 Gamma(Q) 的函数，使用向量化近似积分
    """
    m_grid = np.linspace(0, m_max, n_points)
    fm_vals = np.array([fM_callable(m) for m in m_grid])
    dm = m_grid[1] - m_grid[0]

    def gamma(Q):
        fill_vals = Q / (Q + Q_obs) * m_grid
        pi_vals = np.where(
            fill_vals <= S_i,
            0.5 * fill_vals,
            0.5 * S_i - lam * (fill_vals - S_i)
        )
        return np.sum(pi_vals * fm_vals) * dm

    return gamma, m_grid, fm_vals, dm

# 2. 使用 minimize_scalar 优化 Gamma(Q)
def optimize_Q_star(fM_callable, Q_obs, S_i, lam, Q_min=None, Q_max=None):
    """
    在区间 [Q_min, Q_max] 上寻找最优 Q*
    """
    if Q_min is None:
        Q_min = S_i
    if Q_max is None:
        Q_max = 5 * S_i

    gamma_fn, m_grid, fm_vals, dm = get_fast_gamma_function(fM_callable, Q_obs, S_i, lam)

    result = minimize_scalar(
        lambda Q: -gamma_fn(Q),
        bounds=(Q_min, Q_max),
        method='bounded'
    )

    Q_star = result.x
    gamma_star = -result.fun

    return Q_star, gamma_star, gamma_fn, m_grid, fm_vals

# 示例：你可以替换 fM_callable 为你拟合好的 KDE 函数（如 log-KDE）
# 暂时给出一个占位的 fM（右偏 exponential）
def placeholder_fM(m):
    return np.exp(-0.02 * m) if m >= 0 else 0

# 参数设定
Q_obs = 1000
S_i = 50
lam = 1.5

# 快速优化
Q_star, gamma_star, gamma_fn, m_grid, fm_vals = optimize_Q_star(placeholder_fM, Q_obs, S_i, lam)

# 生成展示数据
Q_grid = np.linspace(S_i, 5 * S_i, 100)
gamma_grid = [gamma_fn(Q) for Q in Q_grid]

import pandas as pd
import ace_tools as tools
tools.display_dataframe_to_user("Fast Gamma vs Q", pd.DataFrame({
    "Q": Q_grid,
    "Expected Profit": gamma_grid
}))

Q_star, gamma_star
