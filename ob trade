def estimate_N_star_at_time(ob_df, timestamp, side='Buy', N_target=100, lookback_minutes=5):
    """
    Estimate optimal order size N* at a specific timestamp using lookback window.

    Parameters:
    - ob_df: DataFrame with 'streamTime', 'bid0', 'ask0', 'bidSize0', 'askSize0', 'trades'
    - timestamp: pd.Timestamp, the moment you want to place the passive order
    - side: 'Buy' or 'Sell'
    - N_target: target executed volume
    - lookback_minutes: how many minutes to look back from timestamp

    Returns:
    - dict of estimated parameters and N* (simple and strict versions)
    """

    end_time = pd.to_datetime(timestamp)
    start_time = end_time - pd.Timedelta(minutes=lookback_minutes)
    df = ob_df[(ob_df['streamTime'] >= start_time) & (ob_df['streamTime'] <= end_time)].copy()

    if df.empty:
        raise ValueError("No order book data in the specified time window.")

    df = df.sort_values('streamTime').reset_index(drop=True)

    df['bidSize0_prev'] = df['bidSize0'].shift(1)
    df['askSize0_prev'] = df['askSize0'].shift(1)
    df.loc[0, 'bidSize0_prev'] = df.loc[0, 'bidSize0']
    df.loc[0, 'askSize0_prev'] = df.loc[0, 'askSize0']

    def estimate_mu(row):
        price_col = 'bid0' if side == 'Buy' else 'ask0'
        trades = row['trades']
        if side == 'Buy':
            relevant = [t for t in trades if t['price'] <= row[price_col]]
        else:
            relevant = [t for t in trades if t['price'] >= row[price_col]]
        return sum(t['size'] for t in relevant)

    def estimate_delta(row):
        size_col = 'bidSize0' if side == 'Buy' else 'askSize0'
        price_col = 'bid0' if side == 'Buy' else 'ask0'
        prev_size = row[size_col + '_prev']
        curr_size = row[size_col]
        trades = row['trades']
        if side == 'Buy':
            relevant = [t for t in trades if t['price'] <= row[price_col]]
        else:
            relevant = [t for t in trades if t['price'] >= row[price_col]]
        traded = sum(t['size'] for t in relevant)
        return max(prev_size - curr_size - traded, 0)

    def estimate_lambda(row):
        size_col = 'bidSize0' if side == 'Buy' else 'askSize0'
        price_col = 'bid0' if side == 'Buy' else 'ask0'
        prev_size = row[size_col + '_prev']
        curr_size = row[size_col]
        trades = row['trades']
        if side == 'Buy':
            relevant = [t for t in trades if t['price'] <= row[price_col]]
        else:
            relevant = [t for t in trades if t['price'] >= row[price_col]]
        traded = sum(t['size'] for t in relevant)
        return max(curr_size - prev_size - traded, 0)

    df['mu_volume'] = df.apply(estimate_mu, axis=1)
    df['delta_volume'] = df.apply(estimate_delta, axis=1)
    df['lambda_volume'] = df.apply(estimate_lambda, axis=1)

    total_time = (df['streamTime'].iloc[-1] - df['streamTime'].iloc[0]).total_seconds()
    lambda_rate = df['lambda_volume'].sum() / total_time
    mu_rate = df['mu_volume'].sum() / total_time
    delta_rate = df['delta_volume'].sum() / total_time

    denominator = mu_rate + delta_rate - lambda_rate
    if denominator <= 0 or np.isnan(denominator):
        return {
            'lambda': lambda_rate,
            'mu': mu_rate,
            'delta': delta_rate,
            'expected_z': np.inf,
            'N_star_simple': N_target,
            'N_star_strict': N_target
        }

    expected_z = lambda_rate / denominator
    N_star_simple = compute_optimal_order_size_simple(expected_z, N_target)
    N_star_strict = compute_optimal_order_size_strict(lambda_rate, mu_rate, delta_rate, N_target)

    return {
        'lambda': lambda_rate,
        'mu': mu_rate,
        'delta': delta_rate,
        'expected_z': expected_z,
        'N_star_simple': N_star_simple,
        'N_star_strict': N_star_strict
    }
